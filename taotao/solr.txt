apache-tomcat-7.047.tar.gz
jdk-7u55-linux-i586.tar.gz
solr-4.10.3.tgz.tgz
zookeeper-3.4.6.tar.gz
IK Analyzer 2012FF_hf1

---------------------------------------- 单机版
创建/usr/local/solr目录

第一步：安装jdk、安装tomcat，tomcat拷贝到创建的目录
第二步：解压solr压缩包。
第三步：把root/solr-4.10.3/dist/solr-4.10.3.war部署到tomcat的webapp下。
第四步：解压缩war包。启动tomcat解压。bin/startup.sh。tail -f logs/catalina.out 查看tomcat是否启动
第五步：先关闭tomcat,需要把root/solr-4.10.3/example/lib/ext目录下的所有的jar包添加到tomcat的solr工程中的/WEV-INF/lib/下面。
第六步：创建solrhome（一个solr服务对应一个solrhome）。把root/solr-4.10.3/example/solr文件夹复制到/usr/local/solr/solrhome
第七步：告诉solr服务solrhome的位置。需要修改/usr/local/solr/tomvat/webapps/solr/WEB-INF/web.xml
	先去掉注释<env-entry></env-entry>  把<env-entry-value>改为solrhome路径
第八步：启动tomcat。

访问solr。 xxx:8080/solr/

5.4.2	配置中文分析器、自定义业务域
分析器使用IKAnalyzer。
使用方法：
第一步：把IK Analyzer 2012FF_hf1依赖的jar包IKAnalyzer2012FF_u1.jar添加到solr工程中/WEV-INF/lib/下面。把分析器使用的扩展词典添加到classpath中。solr工程中/WEV-INF/创建classes目录，把ext_stopword.dic、 IKAnalyzer.cfg.xml、mydict.dic复制到classes

第二步：需要自定义一个FieldType。Schema.xml中定义。可以在FieldType中指定中文分析器。/usr/local/solr/solrhome/collection1/conf/schema.xml
添加下面，name不能重复
<fieldType name="text_ik" class="solr.TextField">
  <analyzer class="org.wltea.analyzer.lucene.IKAnalyzer"/>
</fieldType>

第三步：自定义域。指定域的类型为自定义的FieldType。
Sql语句：
SELECT
	a.id,
	a.title,
	a.sell_point,
	a.price,
	a.image,
	b.`name` category_name,
	c.item_desc
FROM
	tb_item a
LEFT JOIN tb_item_cat b ON a.cid = b.id
LEFT JOIN tb_item_desc c ON a.id = c.item_id
WHERE
	a.`status` = 1

下面都加到Schema.xml中
<field name="item_title" type="text_ik" indexed="true" stored="true"/>
<field name="item_sell_point" type="text_ik" indexed="true" stored="true"/>
<field name="item_price"  type="long" indexed="true" stored="true"/>
<field name="item_image" type="string" indexed="false" stored="true" />
<field name="item_category_name" type="string" indexed="true" stored="true" />
<field name="item_desc" type="text_ik" indexed="true" stored="false" />

<field name="item_keywords" type="text_ik" indexed="true" stored="false" multiValued="true"/>
<copyField source="item_title" dest="item_keywords"/>
<copyField source="item_sell_point" dest="item_keywords"/>
<copyField source="item_category_name" dest="item_keywords"/>
<copyField source="item_desc" dest="item_keywords"/>



5.5	索引库中导入数据
5.5.1	Solrj的使用
	HttpSolrServer：单机，CloudSolrServer:集群
    public class SolrJTest {

	@Test
	public void testSolrJ() throws Exception {
		//创建连接
		SolrServer solrServer = new HttpSolrServer("http://192.168.25.154:8080/solr");
		//创建一个文档对象
		SolrInputDocument document = new SolrInputDocument();
		//添加域
		document.addField("id", "solrtest01");
		document.addField("item_title", "测试商品");
		document.addField("item_sell_point", "卖点");
		//添加到索引库
		solrServer.add(document);
		//提交
		solrServer.commit();
	}
	
	@Test
	public void testQuery() throws Exception {
		//创建连接
		SolrServer solrServer = new HttpSolrServer("http://192.168.25.154:8080/solr");
		//创建一个查询对象
		SolrQuery query = new SolrQuery();
		query.setQuery("*:*");
		//执行查询
		QueryResponse response = solrServer.query(query);
		//取查询结果
		SolrDocumentList solrDocumentList = response.getResults();
		for (SolrDocument solrDocument : solrDocumentList) {
			System.out.println(solrDocument.get("id"));
			System.out.println(solrDocument.get("item_title"));
			System.out.println(solrDocument.get("item_sell_point"));
		}
	}
    }

取商品列表，遍历列表，创建文档对象，把文档对象写入索引库。
要操作索引库需要SolrServer对象，可以把SolrServer放到spring容器中，注入到Service。
applicationContext-service.xml
添加
<!-- 单机版客户端 -->
<bean id="httpSolrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
	<constructor-arg name="baseURL" value="http://192.168.25.154:8080/solr">
</bean>

@Service
public class ItemServiceImpl implements ItemService {

	@Autowired
	private SolrServer solrServer;
	@Autowired
	private ItemMapper itemMapper;
	
	@Override
	public TaotaoResult importItems() throws Exception {
		//查询数据库获得商品列表
		List<SearchItem> itemList = itemMapper.getItemList();
		//遍历列表
		for (SearchItem item : itemList) {
			//创建文档对象
			SolrInputDocument document = new SolrInputDocument();
			//添加域
			document.addField("id", item.getId());
			document.addField("item_title", item.getTitle());
			document.addField("item_sell_point", item.getSell_point());
			document.addField("item_price", item.getPrice());
			document.addField("item_image", item.getImage());
			document.addField("item_category_name", item.getCategory_name());
			document.addField("item_desc", item.getItem_desc());
			//写入索引库
			solrServer.add(document);
		}
		//提交
		solrServer.commit();
		return TaotaoResult.ok();
	}

}


nginx与zookeeper区别
http://blog.csdn.net/zhangyu_ad/article/details/68942158

---------------------------------------- 集群版



















