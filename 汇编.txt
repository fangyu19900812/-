
通用：
	二进制后面加 B
	十六进制后面加 H
	物理地址 = 段地址 * 16 + 偏移地址 //  段地址 * 16 也叫基础地址，段地址左移4位
	系统从CS*16+IP开始执行
	[x]: [x]表示一个内存单元，x表示偏移地址，DS*16+[x]
	mov ax,4c00h int 21h //程序结尾,用于关闭系统

跳转：
	JE：等于则跳转
	JNE：不等于则跳转
	JZ：为 0 则跳转
	JNZ：不为 0 则跳转
	JS：为负则跳转
	JNS：不为负则跳转
	JC：进位则跳转
	JNC：不进位则跳转
	JO：溢出则跳转
	JNO：不溢出则跳转
	JA：无符号大于则跳转
	JNA：无符号不大于则跳转
	JAE：无符号大于等于则跳转
	JNAE：无符号不大于等于则跳转
	JG：有符号大于则跳转
	JNG：有符号不大于则跳转
	JGE：有符号大于等于则跳转
	JNGE：有符号不大于等于则跳转
	JB：无符号小于则跳转
	JNB：无符号不小于则跳转
	JBE：无符号小于等于则跳转
	JNBE：无符号不小于等于则跳转
	JL：有符号小于则跳转JNL ;有符号不小于则跳转
	JLE：有符号小于等于则跳转
	JNLE：有符号不小于等于则跳转
	JP：奇偶位置位则跳转
	JNP：奇偶位清除则跳转
	JPE：奇偶位相等则跳转
	JPO：奇偶位不等则跳转
	JMP：无条件跳转

通用寄存器：
	AX(16位)
	  ├
	  ├- AH(高8位)
	  ├
	  └- AL(低8位)
	 
	BX(16位)
	  ├ 
	  ├- BH(高8位)
	  ├
	  ├- BL(低8位)
	  └- // 一般存储 EA
	  
	 
	CX(16位)
	  ├
	  ├- CH(高8位)
	  ├
	  └- CL(低8位)
	 
	DX(16位)
	  ├
	  ├- DH(高8位)
	  ├
	  └- DL(低8位)

段寄存器	  
	SA(段地址)
	  ├- //  不可用mov设置立即数,只能用寄存器转存
	  ├- // 物理地址 = SA * 16 + EA
	  └- // 一般用 DS 存储
	
	EA(偏移地址)
	  ├- // 不可用mov设置
	  ├- // 物理地址 = SA * 16 + EA
	  └- // 一般用 BX 存储
	  
	DS(数据段寄存器)
	  ├- // 不可用mov设置立即数,只能用寄存器转存:mov ds,ax √ ; mov ds,100H × 
	  ├- // DS*16+[x]
	  └- // 一般存储 SA
	
	CS(代码段寄存器) 
	  ├- // 不可用mov设置
	  └- // 系统从CS*16+IP开始执行
	
	IP(指令指针寄存器)
	  ├- // 不可用mov设置
	  └- // 系统从CS*16+IP开始执行
	  
	ss(栈段寄存器)
	  ├- //存放栈顶地址
	  └- ss:sp(指向栈顶)
	
	sp(栈寄存器)
	  ├- //存放偏移地址
	  └- ss:sp(指向栈顶)
	  
命令：
	mov(赋值)
	  ├
	  ├- mov ax,bx  
	  └- // 把bx的值赋予ax。
	
	add(相加)
	  ├
	  ├- add ax,bx  
	  ├- // 把 ax + bx 的值赋予 ax 。
	  └- // 两个操作对象位数不一致不能相加。
	 
	inc(加1)
	  ├
	  ├- inc ax 
	  └- // 把 ax + 1 的值赋予 ax 。
	  	
	sub(相减)
	  ├
	  ├- sub ax,bx  
	  ├- // 把 ax - bx 的值赋予 ax 。
	  └- // 两个操作对象位数不一致不能相减。
	 
	loop(循环跳转)
	  ├
	  ├-  mov ax,1
	  ├-  mov cx,11
	  ├-  s: add ax,ax
	  ├-  loop s
	  └- // 执行loop时, cx = cx - 1; cx≠0,跳转到s
	  
	jmp(转移指令)
	  ├
	  ├- jmp xx,xxx
	  ├- // 把 xx 赋予 CS, 把 xxx 赋予 IP  。
	  ├- jmp xx
	  └- // 把 xx 赋予 IP。
	  
	push(入栈)
	  ├
	  ├- push ax
	  └- // 把 ax 的值送入栈中。
	  
	pop(出栈)
	  ├
	  ├- pop ax
	  └- // 把栈顶的值移出栈，送入ax中。

	
	
	
	
	
	
	
	
	
	
	
	
	
	